{"version":3,"sources":["components/Topbar.js","components/SpectrumView.js","App.js","reportWebVitals.js","index.js"],"names":["Topbar","_ref","frequency","onFrequencyChange","onGo","onReset","showAllocations","setShowAllocations","showBands","setShowBands","region","setRegion","React","createElement","className","src","alt","type","value","onChange","e","target","placeholder","onClick","checked","truncateToFit","textElem","fullLabel","maxWidthPx","textNode","d3","text","node","getComputedTextLength","truncated","length","slice","renderSubbands","svg","bandData","scale","options","arguments","undefined","barHeight","animate","externalLabelThreshold","transitionDuration","baseModeColors","cw","ssb","fm","digital","atv","satellite","experimental","mixed","selectAll","remove","width","parseFloat","attr","append","labelLanes","subbands","forEach","sb","i","xStart","start","barWidth","end","centerX","fill","mode","cleaned","trim","toLowerCase","parts","split","part","getModeColor","label","bar","transition","duration","style","lane","_labelLanes$lane","some","pos","Math","abs","push","labelY","freq","x","toFixed","SpectrumView","ref","useRef","zoomRef","xScaleRef","markerRef","markerLabelRef","hoverLineRef","margin","useState","sidebarOpen","setSidebarOpen","freqInput","setFreqInput","selectedBand","setSelectedBand","allocations","US","allocationsUS","EU","allocationsEU","APAC","allocationsAPAC","useEffect","current","zoomLayer","allocLayer","allocTextLayer","labelLayer","markerLayer","bandGroup","domain","range","xAxis","ticks","call","data","enter","d","color","usage","allocLabels","styleAllocLabels","lanes","each","cx","widthPx","this","exit","merge","bands","hoverLine","detailedBandLanes","detailedBands","startPx","endPx","on","found","subbandDetails","find","b","description","marker","markerLabel","zoom","scaleExtent","translateExtent","extent","event","transform","zx","rescaleX","k","tickFormat","visibleHz","formatAxis","select","markerX","fx","lastX","minSpacing","setTimeout","backgroundColor","padding","minHeight","preventDefault","input","elements","includes","isNaN","getBoundingClientRect","bandwidth","tx","translate","goToFrequency","resetZoom","r","o","aria-label","background","border","borderRadius","cursor","marginBottom","map","band","key","zoomToBand","name","height","marginTop","borderTop","Fragment","el","display","flexWrap","gap","seen","Set","flatMap","modeStr","filter","arr","has","add","alignItems","fontSize","marginRight","toUpperCase","borderCollapse","borderBottom","textAlign","idx","App","marginLeft","objectFit","fontWeight","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e2f76db3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Topbar.css';\r\n\r\nfunction Topbar({\r\n  frequency,\r\n  onFrequencyChange,\r\n  onGo,\r\n  onReset,\r\n  showAllocations,\r\n  setShowAllocations,\r\n  showBands,\r\n  setShowBands,\r\n  region,\r\n  setRegion\r\n}) {\r\n  return (\r\n    <div className=\"topbar\">\r\n      <div className=\"topbar-left\">\r\n        <img src=\"/favicon.png\" alt=\"SignalAtlas Logo\" className=\"topbar-logo\" />\r\n        <h1 className=\"topbar-title\">SignalAtlas</h1>\r\n      </div>\r\n      <div className=\"topbar-controls\">\r\n        <input\r\n          type=\"text\"\r\n          value={frequency}\r\n          onChange={(e) => onFrequencyChange(e.target.value)}\r\n          placeholder=\"Enter frequency (e.g. 4625, 2.4G)\"\r\n          className=\"topbar-input\"\r\n        />\r\n        <button className=\"topbar-button\" onClick={onGo}>Go</button>\r\n        <button className=\"topbar-button\" onClick={onReset}>Reset Zoom</button>\r\n\r\n        <label className=\"topbar-checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={showAllocations}\r\n            onChange={(e) => setShowAllocations(e.target.checked)}\r\n          />\r\n          Show Allocations\r\n        </label>\r\n\r\n        <label className=\"topbar-checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={showBands}\r\n            onChange={(e) => setShowBands(e.target.checked)}\r\n          />\r\n          Show Band Markers\r\n        </label>\r\n\r\n        <select\r\n          className=\"topbar-select\"\r\n          value={region}\r\n          onChange={(e) => setRegion(e.target.value)}\r\n        >\r\n          <option>United States</option>\r\n          <option>Europe</option>\r\n          <option>APAC</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Topbar;\r\n","// src/components/SpectrumView.js\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport bands from '../data/bands.json';\r\nimport detailedBands from '../data/detailedbands.json';\r\nimport allocationsUS from '../data/allocations-us.json';\r\nimport allocationsEU from '../data/allocations-eu.json';\r\nimport allocationsAPAC from '../data/allocations-apac.json';\r\nimport subbandDetails from '../data/subbands.json';\r\nimport '../styles.css';\r\nimport Topbar from './Topbar';\r\n\r\nfunction formatHz(freq) {\r\n  if (freq >= 1e9) return (freq / 1e9).toFixed(3) + ' GHz';\r\n  if (freq >= 1e6) return (freq / 1e6).toFixed(3) + ' MHz';\r\n  if (freq >= 1e3) return (freq / 1e3).toFixed(1) + ' kHz';\r\n  return freq + ' Hz';\r\n}\r\n\r\nfunction getTruncatedLabel(label, pixelWidth) {\r\n  if (pixelWidth < 30) return label.slice(0, 5) + '…';\r\n  if (pixelWidth < 50) return label.slice(0, 10) + '…';\r\n  return label;\r\n}\r\n\r\nfunction truncateToFit(textElem, fullLabel, maxWidthPx) {\r\n  const textNode = d3.select(textElem);\r\n  textNode.text(fullLabel);\r\n\r\n  if (textNode.node().getComputedTextLength() <= maxWidthPx) return;\r\n\r\n  let truncated = fullLabel;\r\n  while (truncated.length > 1 && textNode.node().getComputedTextLength() > maxWidthPx) {\r\n    truncated = truncated.slice(0, -1);\r\n    textNode.text(truncated + \"…\");\r\n  }\r\n}\r\n\r\nfunction renderSubbands(svg, bandData, scale, options = {}) {\r\n  const {\r\n    barHeight = 12,\r\n    animate = true,\r\n    externalLabelThreshold = 40,\r\n    transitionDuration = 400,\r\n  } = options;\r\n\r\n  const baseModeColors = {\r\n    cw: '#888888',\r\n    ssb: '#ebcb8b',\r\n    fm: '#a3be8c',\r\n    digital: '#bf616a',\r\n    atv: '#b48ead',\r\n    satellite: '#5e81ac',\r\n    experimental: '#d08770',\r\n    mixed: '#88c0d0',\r\n  };\r\n\r\n  const getModeColor = (mode) => {\r\n    if (!mode) return '#555';\r\n    const cleaned = mode.trim().toLowerCase();\r\n    if (baseModeColors[cleaned]) return baseModeColors[cleaned];\r\n    const parts = cleaned.split(/[/\\s]+/);\r\n    for (const part of parts) {\r\n      if (baseModeColors[part]) return baseModeColors[part];\r\n    }\r\n    return '#999';\r\n  };\r\n\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  const width = parseFloat(svg.attr(\"width\")) || 800;\r\n  svg.append(\"rect\")\r\n    .attr(\"x\", 0)\r\n    .attr(\"y\", 20)\r\n    .attr(\"width\", width)\r\n    .attr(\"height\", barHeight)\r\n    .attr(\"fill\", \"#333\");\r\n\r\n  const labelLanes = [];\r\n  const laneSpacing = 12;\r\n\r\n  bandData.subbands.forEach((sb, i) => {\r\n    const xStart = scale(sb.start);\r\n    const xEnd = scale(sb.end);\r\n    const barWidth = xEnd - xStart;\r\n    const centerX = xStart + barWidth / 2;\r\n    const fill = getModeColor(sb.mode);\r\n    const label = sb.label.length > 20 ? sb.label.slice(0, 17) + '…' : sb.label;\r\n\r\n    const bar = svg.append(\"rect\")\r\n      .attr(\"x\", xStart)\r\n      .attr(\"y\", 20)\r\n      .attr(\"width\", 0)\r\n      .attr(\"height\", barHeight)\r\n      .attr(\"fill\", fill);\r\n\r\n    if (animate) {\r\n      bar.transition()\r\n        .duration(transitionDuration)\r\n        .attr(\"width\", barWidth);\r\n    } else {\r\n      bar.attr(\"width\", barWidth);\r\n    }\r\n\r\n    if (barWidth >= externalLabelThreshold) {\r\n      svg.append(\"text\")\r\n        .attr(\"x\", centerX)\r\n        .attr(\"y\", 30)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"fill\", \"#fff\")\r\n        .attr(\"font-size\", \"10px\")\r\n        .text(label)\r\n        .style(\"opacity\", 0)\r\n        .transition()\r\n        .duration(transitionDuration)\r\n        .style(\"opacity\", 1);\r\n    } else {\r\n      let lane = 0;\r\n      while (\r\n        labelLanes[lane]?.some(pos => Math.abs(pos - centerX) < 50)\r\n      ) {\r\n        lane++;\r\n      }\r\n      if (!labelLanes[lane]) labelLanes[lane] = [];\r\n      labelLanes[lane].push(centerX);\r\n\r\n      const labelY = 10 - lane * laneSpacing;\r\n\r\n      svg.append(\"text\")\r\n        .attr(\"x\", centerX)\r\n        .attr(\"y\", labelY)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"fill\", \"#ccc\")\r\n        .attr(\"font-size\", \"9px\")\r\n        .text(label)\r\n        .style(\"opacity\", 0)\r\n        .transition()\r\n        .duration(transitionDuration)\r\n        .style(\"opacity\", 1);\r\n\r\n      svg.append(\"line\")\r\n        .attr(\"x1\", centerX)\r\n        .attr(\"x2\", centerX)\r\n        .attr(\"y1\", labelY + 2)\r\n        .attr(\"y2\", 20)\r\n        .attr(\"stroke\", \"#999\")\r\n        .attr(\"stroke-width\", 1)\r\n        .style(\"opacity\", 0)\r\n        .transition()\r\n        .duration(transitionDuration)\r\n        .style(\"opacity\", 1);\r\n    }\r\n  });\r\n\r\n  d3.ticks(bandData.start, bandData.end, 5).forEach((freq) => {\r\n    const x = scale(freq);\r\n    svg.append(\"line\")\r\n      .attr(\"x1\", x)\r\n      .attr(\"x2\", x)\r\n      .attr(\"y1\", 32)\r\n      .attr(\"y2\", 42)\r\n      .attr(\"stroke\", \"#aaa\");\r\n\r\n    svg.append(\"text\")\r\n      .attr(\"x\", x)\r\n      .attr(\"y\", 55)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"#ccc\")\r\n      .attr(\"font-size\", \"10px\")\r\n      .text((freq / 1e6).toFixed(3) + \" MHz\");\r\n  });\r\n}\r\n\r\nconst SpectrumView = () => {\r\n  const ref = useRef();\r\n  const zoomRef = useRef();\r\n  const xScaleRef = useRef();\r\n  const markerRef = useRef();\r\n  const markerLabelRef = useRef();\r\n  const hoverLineRef = useRef();\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 20 };\r\n  const [showAllocations, setShowAllocations] = useState(true);\r\n  const [showBands, setShowBands] = useState(true);\r\n  const [region, setRegion] = useState('US');\r\n  const [sidebarOpen, setSidebarOpen] = useState(true);\r\n  const [freqInput, setFreqInput] = useState('');\r\n  const [selectedBand, setSelectedBand] = useState(null);\r\n\r\n  const regionMap = {\r\n        US: allocationsUS,\r\n        EU: allocationsEU,\r\n        APAC: allocationsAPAC\r\n      };\r\n  const allocations = regionMap[region];\r\n\r\n  useEffect(() => {\r\n    const width = 1200;\r\n    const height = 300;\r\n\r\n    d3.select(ref.current).selectAll(\"*\").remove();\r\n\r\n    const svg = d3.select(ref.current)\r\n      .attr(\"viewBox\", `0 0 ${width} ${height}`)\r\n      .style(\"background\", \"#1e1e1e\");\r\n\r\n    svg.append(\"defs\")\r\n      .append(\"pattern\")\r\n      .attr(\"id\", \"diagonal-stripes\")\r\n      .attr(\"patternUnits\", \"userSpaceOnUse\")\r\n      .attr(\"width\", 8)\r\n      .attr(\"height\", 8)\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M-2,2 l4,-4 M0,8 l8,-8 M6,10 l4,-4\")\r\n      .attr(\"stroke\", \"white\")\r\n      .attr(\"stroke-opacity\", 0.05)\r\n      .attr(\"stroke-width\", 1);\r\n\r\n    const zoomLayer = svg.append(\"g\").attr(\"class\", \"zoom-layer\");\r\n    const allocLayer = svg.append(\"g\").attr(\"class\", \"alloc-layer\");\r\n    const allocTextLayer = svg.append(\"g\").attr(\"class\", \"alloc-text-layer\");\r\n    const labelLayer = svg.append(\"g\").attr(\"class\", \"label-layer\");\r\n    const markerLayer = svg.append(\"g\").attr(\"class\", \"marker-layer\");\r\n    const bandGroup = svg.append(\"g\").attr(\"class\", \"band-group\");\r\n\r\n    const x = d3.scaleLinear()\r\n      .domain([0, 300_000_000_000])\r\n      .range([margin.left, width - margin.right]);\r\n\r\n    xScaleRef.current = x;\r\n\r\n    const xAxis = d3.axisBottom(x).ticks(12);\r\n\r\n    zoomLayer.append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\r\n      .attr(\"class\", \"x-axis\")\r\n      .call(xAxis)\r\n      .selectAll(\"text\")\r\n      .attr(\"fill\", \"#ccc\");\r\n\r\n    const formatAxis = (scale) => {\r\n      const visibleHz = scale.domain()[1] - scale.domain()[0];\r\n      if (visibleHz < 1_000) return d => `${d.toFixed(0)} Hz`;\r\n      if (visibleHz < 1_000_000) return d => `${(d / 1e3).toFixed(2)} kHz`;\r\n      if (visibleHz < 1_000_000_000) return d => `${(d / 1e6).toFixed(2)} MHz`;\r\n      return d => `${(d / 1e9).toFixed(2)} GHz`;\r\n    };\r\n\r\n    allocLayer.selectAll(\"rect\")\r\n      .data(allocations)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", d => x(d.start))\r\n      .attr(\"y\", 30)\r\n      .attr(\"width\", d => x(d.end) - x(d.start))\r\n      .attr(\"height\", 150)\r\n      .attr(\"fill\", d => d.color || \"#555\")\r\n      .attr(\"fill-opacity\", 0.15)\r\n      .attr(\"class\", \"allocation-band\")\r\n      .style(\"display\", showAllocations ? \"block\" : \"none\")\r\n      .append(\"title\")\r\n      .text(d => `${d.label}: ${d.usage}`);\r\n\r\n    const allocLabels = allocTextLayer.selectAll(\"text\").data(allocations);\r\n    allocLabels.exit().remove();\r\n    allocLabels.enter()\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"#aaa\")\r\n      .attr(\"font-size\", \"10px\")\r\n      .attr(\"x\", -9999)\r\n      .attr(\"y\", -9999)\r\n      .merge(allocLabels)\r\n      .text(d => d.label);\r\n\r\n    function styleAllocLabels(scale) {\r\n      const lanes = [];\r\n      const minSpacing = 50;\r\n      const baseY = 190;\r\n      const lineH = 14;\r\n      const minWidthPx = 30;\r\n\r\n      allocTextLayer.selectAll(\"text\")\r\n        .each(function(d) {\r\n          const cx = (scale(d.start) + scale(d.end)) / 2;\r\n          const widthPx = scale(d.end) - scale(d.start);\r\n\r\n          if (!showAllocations || widthPx < minWidthPx) {\r\n            return d3.select(this).style(\"opacity\", 0);\r\n          }\r\n\r\n          let lane = 0;\r\n          while (lanes[lane] != null && cx - lanes[lane] < minSpacing) {\r\n            lane++;\r\n          }\r\n          lanes[lane] = cx;\r\n\r\n          d3.select(this)\r\n            .attr(\"x\", cx)\r\n            .attr(\"y\", baseY + lane * lineH)\r\n            .style(\"opacity\", 1);\r\n\r\n          if (widthPx < 10) {\r\n            return d3.select(this).style(\"opacity\", 0);\r\n          }\r\n          truncateToFit(this, d.label, widthPx);\r\n        });\r\n    }\r\n\r\n    styleAllocLabels(x);\r\n\r\n    const bandsGroup = zoomLayer.append(\"g\");\r\n    bandsGroup.selectAll(\"rect\")\r\n      .data(bands)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", d => x(d.start))\r\n      .attr(\"y\", 50)\r\n      .attr(\"width\", d => x(d.end) - x(d.start))\r\n      .attr(\"height\", 100)\r\n      .attr(\"fill\", \"url(#diagonal-stripes)\")\r\n      .attr(\"fill-opacity\", 1)\r\n      .attr(\"stroke\", d => d.color)\r\n      .attr(\"stroke-width\", 2)\r\n      .append(\"title\")\r\n      .text(d => d.label);\r\n\r\n    labelLayer.selectAll(\"text\")\r\n      .data(bands)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"x\", d => x((d.start + d.end) / 2))\r\n      .attr(\"y\", 140)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"#fff\")\r\n      .attr(\"font-size\", \"14px\")\r\n      .attr(\"font-weight\", \"bold\")\r\n      .text(d => d.label);\r\n\r\n    const hoverLine = markerLayer.append(\"line\")\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"#888\")\r\n      .attr(\"stroke-dasharray\", \"4 2\")\r\n      .attr(\"stroke-width\", 1)\r\n      .style(\"display\", \"none\");\r\n\r\n    hoverLineRef.current = hoverLine;\r\n\r\n    // === Render detailed bands with vertical stacking to avoid overlaps ===\r\n    // Collision-avoidant rendering for detailed bands\r\n    const detailedBandLanes = [];\r\n    const detailedBandLineHeight = 10;\r\n    const detailedBandBaseY = 55;\r\n\r\n    // Rectangles for detailed bands\r\n    bandGroup.selectAll(\"rect\")\r\n    .data(detailedBands)\r\n    .enter()\r\n    .append(\"rect\")\r\n    .each(function(d) {\r\n      const startPx = x(d.start);\r\n      const endPx = x(d.end);\r\n      const widthPx = endPx - startPx;\r\n  \r\n      let lane = 0;\r\n      while (\r\n        detailedBandLanes[lane] &&\r\n        detailedBandLanes[lane].some(({ start, end }) => !(endPx < start || startPx > end))\r\n      ) {\r\n        lane++;\r\n      }\r\n  \r\n      if (!detailedBandLanes[lane]) detailedBandLanes[lane] = [];\r\n      detailedBandLanes[lane].push({ start: startPx, end: endPx });\r\n      d.lane = lane; // Store lane on data\r\n  \r\n      d3.select(this)\r\n        .attr(\"x\", startPx)\r\n        .attr(\"y\", detailedBandBaseY + lane * detailedBandLineHeight)\r\n        .attr(\"width\", widthPx)\r\n        .attr(\"height\", 8)\r\n        .attr(\"fill\", d.color || \"#ff0\")\r\n        .attr(\"opacity\", 0.8)\r\n        .style(\"cursor\", \"pointer\")\r\n        .on(\"click\", () => {\r\n          const found = subbandDetails.find(b =>\r\n            b.label === d.label || (b.start === d.start && b.end === d.end)\r\n          );\r\n          setSelectedBand(found || d); // fallback to showing d if no match\r\n        })\r\n        .append(\"title\")\r\n        .text(`${d.label}\\n${d.description || ''}`);\r\n    });  \r\n\r\n    // Labels for detailed bands\r\n    bandGroup.selectAll(\"text\")\r\n    .data(detailedBands)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"x\", d => (x(d.start) + x(d.end)) / 2)\r\n    .attr(\"y\", d => detailedBandBaseY + d.lane * detailedBandLineHeight + 5) // 4 centers in 8px bar\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"dominant-baseline\", \"middle\") // This keeps it centered vertically\r\n    .attr(\"fill\", \"#ccc\")\r\n    .attr(\"font-size\", \"9px\")\r\n    .text(d => d.label)\r\n    .each(function(d) {\r\n      const widthPx = x(d.end) - x(d.start);\r\n      truncateToFit(this, d.label, widthPx);\r\n    });   \r\n\r\n    const marker = markerLayer.append(\"line\")\r\n      .attr(\"y1\", 30)\r\n      .attr(\"y2\", height - margin.bottom)\r\n      .attr(\"stroke\", \"#ff4081\")\r\n      .attr(\"stroke-width\", 2)\r\n      .style(\"display\", \"none\")\r\n      .style(\"cursor\", \"pointer\")\r\n      .on(\"click\", () => {\r\n        marker.style(\"display\", \"none\");\r\n        markerLabel.style(\"display\", \"none\");\r\n      });\r\n\r\n    const markerLabel = markerLayer.append(\"text\")\r\n      .attr(\"y\", 20)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"#ff4081\")\r\n      .attr(\"font-size\", \"12px\")\r\n      .style(\"display\", \"none\")\r\n      .style(\"pointer-events\", \"none\");\r\n\r\n    markerRef.current = marker;\r\n    markerLabelRef.current = markerLabel;\r\n\r\n    const zoom = d3.zoom()\r\n      .scaleExtent([1, 1e8])\r\n      .translateExtent([[0, 0], [width, height]])\r\n      .extent([[0, 0], [width, height]])\r\n      .on(\"zoom\", (event) => {\r\n        const transform = event.transform;\r\n        const zx = transform.rescaleX(x);\r\n        const zoomLevel = transform.k;\r\n\r\n        xAxis.tickFormat(formatAxis(zx));\r\n        zoomLayer.select(\".x-axis\").call(xAxis.scale(zx)).selectAll(\"text\").attr(\"fill\", \"#ccc\");\r\n\r\n        allocLayer.selectAll(\"rect\")\r\n          .attr(\"x\", d => zx(d.start))\r\n          .attr(\"width\", d => zx(d.end) - zx(d.start));\r\n\r\n          styleAllocLabels(zx);      \r\n\r\n        zoomLayer.selectAll(\"rect\")\r\n          .attr(\"x\", d => zx(d.start))\r\n          .attr(\"width\", d => zx(d.end) - zx(d.start));\r\n\r\n        labelLayer.selectAll(\"text\")\r\n          .attr(\"x\", d => (zx(d.start) + zx(d.end)) / 2)\r\n          .style(\"display\", d => (zx(d.end) - zx(d.start)) < 40 ? \"none\" : \"block\");\r\n\r\n        const showDetailedBands = zoomLevel > 5000;\r\n\r\n        bandGroup.selectAll(\"rect\")\r\n          .attr(\"x\", d => zx(d.start))\r\n          .attr(\"width\", d => zx(d.end) - zx(d.start))\r\n          .style(\"opacity\", d => showBands && (zx(d.end) - zx(d.start)) > 1 ? 0.8 : 0);\r\n\r\n        bandGroup.selectAll(\"text\")\r\n          .attr(\"x\", d => (zx(d.start) + zx(d.end)) / 2)\r\n          .each(function(d) {\r\n            const widthPx = zx(d.end) - zx(d.start);\r\n            truncateToFit(this, d.label, widthPx);\r\n          })          \r\n          .style(\"opacity\", d => {\r\n            const width = zx(d.end) - zx(d.start);\r\n            return showBands && width > 40 ? 1 : 0;\r\n          });\r\n\r\n        if (markerRef.current && markerRef.current.style(\"display\") !== \"none\") {\r\n          const markerX = +markerRef.current.attr(\"data-freq\");\r\n          const fx = zx(markerX);\r\n          markerRef.current.attr(\"x1\", fx).attr(\"x2\", fx);\r\n          markerLabelRef.current.attr(\"x\", fx);\r\n        }\r\n\r\n        if (hoverLineRef.current) hoverLineRef.current.style(\"display\", \"none\");\r\n\r\n        //hide any that are too close to the last one\r\n        if (showAllocations) {\r\n        let lastX = -Infinity;\r\n        const minSpacing = 50; // px between labels—you can tweak this\r\n\r\n        allocTextLayer.selectAll(\"text\")\r\n          .each(function(d) {\r\n            const cx = (zx(d.start) + zx(d.end)) / 2;\r\n            if (cx - lastX > minSpacing) {\r\n              d3.select(this).style(\"opacity\", 1);\r\n              lastX = cx;\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n    svg.call(zoom);\r\n    zoomRef.current = zoom;\r\n    setTimeout(() => {\r\n      svg.call(zoom.transform, d3.zoomIdentity);\r\n    }, 0);\r\n\r\n  }, [showAllocations, showBands, allocations]);\r\n\r\n  const resetZoom = () => {\r\n    const svg = d3.select(ref.current);\r\n    svg.transition().duration(500).call(zoomRef.current.transform, d3.zoomIdentity);\r\n    if (markerRef.current) markerRef.current.style(\"display\", \"none\");\r\n    if (markerLabelRef.current) markerLabelRef.current.style(\"display\", \"none\");\r\n  };\r\n\r\n  const zoomToBand = (band) => {\r\n    const svg = d3.select(ref.current);\r\n    const width = svg.node().getBoundingClientRect().width;\r\n    const x = xScaleRef.current;\r\n    const scale = width / (x(band.end) - x(band.start));\r\n    const tx = -x(band.start) * scale + margin.left;\r\n    const transform = d3.zoomIdentity.translate(tx, 0).scale(scale);\r\n    svg.transition().duration(500).call(zoomRef.current.transform, transform);\r\n  };\r\n\r\n  const goToFrequency = (e) => {\r\n    e.preventDefault();\r\n    const input = e.target.elements.freq.value.trim().toLowerCase();\r\n    let freq = parseFloat(input);\r\n    if (input.includes(\"ghz\")) freq *= 1e9;\r\n    else if (input.includes(\"mhz\")) freq *= 1e6;\r\n    else if (input.includes(\"khz\")) freq *= 1e3;\r\n    if (isNaN(freq)) return;\r\n\r\n    const svg = d3.select(ref.current);\r\n    const width = svg.node().getBoundingClientRect().width;\r\n    const x = xScaleRef.current;\r\n\r\n    const bandwidth = 100_000;\r\n    const scale = width / (x(freq + bandwidth / 2) - x(freq - bandwidth / 2));\r\n    const tx = -x(freq) * scale + width / 2;\r\n    const transform = d3.zoomIdentity.translate(tx, 0).scale(scale);\r\n\r\n    svg.transition().duration(500).call(zoomRef.current.transform, transform);\r\n\r\n    if (markerRef.current) {\r\n      markerRef.current\r\n        .attr(\"x1\", x(freq))\r\n        .attr(\"x2\", x(freq))\r\n        .attr(\"data-freq\", freq)\r\n        .style(\"display\", \"block\");\r\n    }\r\n    if (markerLabelRef.current) {\r\n      const label = freq >= 1e9 ? `${(freq / 1e9).toFixed(3)} GHz`\r\n        : freq >= 1e6 ? `${(freq / 1e6).toFixed(3)} MHz`\r\n        : freq >= 1e3 ? `${(freq / 1e3).toFixed(3)} kHz`\r\n        : `${freq.toFixed(0)} Hz`;\r\n      markerLabelRef.current\r\n        .attr(\"x\", x(freq))\r\n        .text(label)\r\n        .style(\"display\", \"block\");\r\n    }\r\n  };\r\n\r\n  const toggleAllocations = () => {\r\n    setShowAllocations(prev => !prev);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"spectrum-view-container\"\r\n      style={{ backgroundColor: '#121212', padding: '1rem', minHeight: '100vh', color: 'white' }}\r\n    >\r\n      {/* ⬆️ Topbar with all controls */}\r\n      <Topbar\r\n        frequency={freqInput}\r\n        onFrequencyChange={setFreqInput}\r\n        onGo={() => {\r\n          const fakeEvent = {\r\n            preventDefault: () => {},\r\n            target: {\r\n              elements: {\r\n                freq: { value: freqInput },\r\n              },\r\n            },\r\n          };\r\n          goToFrequency(fakeEvent);\r\n        }}\r\n        onReset={resetZoom}\r\n        showAllocations={showAllocations}\r\n        setShowAllocations={setShowAllocations}\r\n        showBands={showBands}\r\n        setShowBands={setShowBands}\r\n        region={region === 'US' ? 'United States' : region === 'EU' ? 'Europe' : region}\r\n        setRegion={(r) => setRegion(r === 'United States' ? 'US' : r === 'Europe' ? 'EU' : r)}\r\n      />\r\n  \r\n      {/* ⬅️ Collapsible sidebar with band jump buttons */}\r\n      <div className={`band-sidebar ${sidebarOpen ? 'open' : 'closed'}`}>\r\n        <button\r\n          className=\"sidebar-toggle\"\r\n          onClick={() => setSidebarOpen((o) => !o)}\r\n          aria-label={sidebarOpen ? 'Collapse sidebar' : 'Open sidebar'}\r\n          style={{\r\n            background: '#222',\r\n            color: '#fff',\r\n            border: 'none',\r\n            padding: '4px 8px',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer',\r\n            marginBottom: '8px',\r\n          }}\r\n        >\r\n          {sidebarOpen ? '«' : '»'}\r\n        </button>\r\n  \r\n        {sidebarOpen && (\r\n          <div className=\"buttons-container-wrapper\">\r\n            <div className=\"buttons-container\">\r\n              {bands.slice(0, 8).map((band, i) => (\r\n                <button key={i} className=\"band-button\" onClick={() => zoomToBand(band)}>\r\n                  {band.name || band.label}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n  \r\n      {/* 📊 Spectrum canvas */}\r\n      <svg ref={ref} width=\"100%\" height=\"400px\" />\r\n  \r\n      {/* 📋 Detailed Band Information Box */}\r\n      {selectedBand && (\r\n        <div\r\n          style={{\r\n            background: '#1e1e1e',\r\n            color: 'white',\r\n            padding: '1rem',\r\n            marginTop: '1rem',\r\n            borderTop: '1px solid #333',\r\n          }}\r\n        >\r\n          <h3 style={{ marginTop: 0 }}>{selectedBand.label}</h3>\r\n          <p>\r\n            <strong>Frequency:</strong>{' '}\r\n            {(selectedBand.start / 1e6).toFixed(3)}–{(selectedBand.end / 1e6).toFixed(3)} MHz\r\n          </p>\r\n  \r\n          {selectedBand.description && <p>{selectedBand.description}</p>}\r\n  \r\n          {selectedBand.subbands && (\r\n            <>\r\n              <svg\r\n                ref={(el) => {\r\n                  if (!el || !selectedBand) return;\r\n                  const svg = d3.select(el);\r\n                  svg.selectAll(\"*\").remove();\r\n\r\n                  const width = el.getBoundingClientRect().width;\r\n                  const height = 70;\r\n                  svg.attr(\"width\", width).attr(\"height\", height);\r\n\r\n                  // Map of known single-mode colors\r\n                  const baseModeColors = {\r\n                    cw: '#888888',\r\n                    ssb: '#ebcb8b',\r\n                    fm: '#a3be8c',\r\n                    digital: '#bf616a',\r\n                    atv: '#b48ead',\r\n                    satellite: '#5e81ac',\r\n                    experimental: '#d08770',\r\n                    mixed: '#88c0d0',\r\n                  };\r\n\r\n                  // Normalize mixed or unknown modes\r\n                  const getModeColor = (mode) => {\r\n                    if (!mode) return '#555';\r\n                    const cleaned = mode.trim().toLowerCase();\r\n                    if (baseModeColors[cleaned]) return baseModeColors[cleaned];\r\n\r\n                    const parts = cleaned.split(/[\\s/]+/);\r\n                    for (const part of parts) {\r\n                      if (baseModeColors[part]) return baseModeColors[part];\r\n                    }\r\n                    return '#999';\r\n                  };\r\n\r\n                  const scale = d3.scaleLinear()\r\n                    .domain([selectedBand.start, selectedBand.end])\r\n                    .range([0, width]);\r\n\r\n                  // Background bar\r\n                  svg.append(\"rect\")\r\n                    .attr(\"x\", 0)\r\n                    .attr(\"y\", 20)\r\n                    .attr(\"width\", width)\r\n                    .attr(\"height\", 12)\r\n                    .attr(\"fill\", \"#333\");\r\n\r\n                  // Subband bars and dynamic labels\r\n                  const laneHeight = 12;\r\n                  const labelYOffset = 8;\r\n\r\n                  const labelLanes = [];\r\n                  const laneSpacing = 12;\r\n                  const externalLabelThreshold = 40;\r\n\r\n                  renderSubbands(svg, selectedBand, scale, {\r\n                    animate: true,\r\n                    barHeight: 12,\r\n                    externalLabelThreshold: 40,\r\n                    transitionDuration: 500,\r\n                  });                                    \r\n                }}\r\n                style={{ width: '100%', height: '70px', marginTop: '10px' }}\r\n              />\r\n  \r\n              {/* Legend */}\r\n              {/* Dynamic Legend */}\r\n              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px', marginTop: '0.5rem' }}>\r\n                {(() => {\r\n                  const baseModeColors = {\r\n                    cw: '#888888',\r\n                    ssb: '#ebcb8b',\r\n                    fm: '#a3be8c',\r\n                    digital: '#bf616a',\r\n                    atv: '#b48ead',\r\n                    satellite: '#5e81ac',\r\n                    experimental: '#d08770',\r\n                    mixed: '#88c0d0',\r\n                  };\r\n\r\n                  const getModeColor = (mode) => {\r\n                    if (!mode) return '#555';\r\n                    const cleaned = mode.trim().toLowerCase();\r\n                    if (baseModeColors[cleaned]) return baseModeColors[cleaned];\r\n                    const parts = cleaned.split(/[\\s/]+/);\r\n                    for (const part of parts) {\r\n                      if (baseModeColors[part]) return baseModeColors[part];\r\n                    }\r\n                    return '#999';\r\n                  };\r\n\r\n                  const seen = new Set();\r\n                  return selectedBand.subbands\r\n                    .map(sb => (sb.mode || '').trim().toLowerCase())\r\n                    .flatMap(modeStr => modeStr.split(/[\\s/]+/)) // split composite modes\r\n                    .filter((mode, i, arr) => mode && !seen.has(mode) && seen.add(mode)) // dedupe\r\n                    .map(mode => (\r\n                      <div key={mode} style={{ display: 'flex', alignItems: 'center', fontSize: '0.9rem' }}>\r\n                        <span style={{ width: '14px', height: '14px', backgroundColor: getModeColor(mode), display: 'inline-block', marginRight: '6px' }} />\r\n                        {mode.toUpperCase()}\r\n                      </div>\r\n                    ));\r\n                })()}\r\n              </div>\r\n  \r\n              <table style={{ width: '100%', color: '#ddd', borderCollapse: 'collapse', marginTop: '1rem' }}>\r\n                <thead>\r\n                  <tr style={{ borderBottom: '1px solid #444' }}>\r\n                    <th style={{ textAlign: 'left', padding: '4px' }}>Label</th>\r\n                    <th style={{ textAlign: 'left', padding: '4px' }}>Start</th>\r\n                    <th style={{ textAlign: 'left', padding: '4px' }}>End</th>\r\n                    <th style={{ textAlign: 'left', padding: '4px' }}>Mode</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {selectedBand.subbands.map((sb, idx) => (\r\n                    <tr key={idx} style={{ borderBottom: '1px solid #333' }}>\r\n                      <td style={{ padding: '4px' }}>{sb.label}</td>\r\n                      <td style={{ padding: '4px' }}>{(sb.start / 1e6).toFixed(3)} MHz</td>\r\n                      <td style={{ padding: '4px' }}>{(sb.end / 1e6).toFixed(3)} MHz</td>\r\n                      <td style={{ padding: '4px' }}>{sb.mode}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </>\r\n          )}\r\n  \r\n          <button\r\n            style={{\r\n              marginTop: '1rem',\r\n              backgroundColor: '#333',\r\n              color: 'white',\r\n              padding: '6px 12px',\r\n              border: 'none',\r\n              borderRadius: '4px',\r\n              cursor: 'pointer',\r\n            }}\r\n            onClick={() => setSelectedBand(null)}\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );        \r\n};\r\n\r\nexport default SpectrumView;","import React from 'react';\nimport SpectrumView from './components/SpectrumView';\nimport Topbar from './components/Topbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Header container with logo */}\n      <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginLeft: '20px' }}>\n        <img \n          src=\"/favicon.png\"  // Ensure this points to the correct image in the public folder\n          alt=\"SignalAtlas Logo\"\n          style={{ width: '40px', height: '40px', objectFit: 'contain' }}\n        />\n        <h1 style={{ margin: '0', fontSize: '2rem', fontWeight: 'bold', color: 'white' }}>\n          SignalAtlas\n        </h1>\n      </div>\n      <SpectrumView />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}