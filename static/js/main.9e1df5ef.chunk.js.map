{"version":3,"sources":["components/Topbar.js","utils/renderSubbands.js","components/SpectrumLayout.js","components/SpectrumView.js","App.js","reportWebVitals.js","index.js"],"names":["Topbar","_ref","frequency","onFrequencyChange","onGo","onReset","showAllocations","setShowAllocations","showBands","setShowBands","region","setRegion","React","createElement","className","src","alt","type","value","onChange","e","target","placeholder","onClick","checked","renderSubbands","svg","bandData","scale","options","arguments","length","undefined","barHeight","animate","externalLabelThreshold","transitionDuration","baseModeColors","cw","ssb","fm","digital","atv","satellite","experimental","mixed","selectAll","remove","width","parseFloat","attr","append","labelLanes","subbands","forEach","sb","i","xStart","start","barWidth","end","centerX","fill","mode","cleaned","trim","toLowerCase","parts","split","part","getModeColor","label","slice","bar","transition","duration","text","style","lane","_labelLanes$lane","some","pos","Math","abs","push","labelY","d3","freq","x","toFixed","SpectrumLayout","refProp","freqInput","setFreqInput","resetZoom","goToFrequency","sidebarOpen","setSidebarOpen","bands","zoomToBand","selectedBand","setSelectedBand","instructionsOpen","setInstructionsOpen","instructionsRef","useRef","backgroundColor","padding","minHeight","color","preventDefault","elements","r","position","bottom","left","border","borderRadius","cursor","zIndex","o","aria-label","background","marginBottom","map","band","key","name","ref","top","height","boxShadow","transform","opacity","pointerEvents","role","paddingLeft","marginTop","borderTop","description","Fragment","el","getBoundingClientRect","domain","range","display","flexWrap","gap","seen","Set","flatMap","modeStr","filter","arr","has","add","alignItems","fontSize","marginRight","toUpperCase","borderCollapse","borderBottom","textAlign","idx","truncateToFit","textElem","fullLabel","maxWidthPx","textNode","node","getComputedTextLength","truncated","SpectrumView","zoomRef","xScaleRef","markerRef","markerLabelRef","hoverLineRef","margin","useState","useEffect","handleClickOutside","current","contains","document","addEventListener","removeEventListener","allocations","US","allocationsUS","EU","allocationsEU","APAC","allocationsAPAC","zoomLayer","allocLayer","allocTextLayer","labelLayer","markerLayer","bandGroup","xAxis","ticks","call","data","enter","d","usage","allocLabels","styleAllocLabels","lanes","each","cx","widthPx","this","exit","merge","hoverLine","detailedBandLanes","detailedBands","startPx","endPx","on","found","subbandDetails","find","b","marker","markerLabel","zoom","scaleExtent","translateExtent","extent","event","zx","rescaleX","tickFormat","visibleHz","formatAxis","select","markerX","fx","lastX","minSpacing","setTimeout","input","includes","isNaN","bandwidth","tx","translate","App","marginLeft","objectFit","fontWeight","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9e1df5ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Topbar.css';\r\n\r\nfunction Topbar({\r\n  frequency,\r\n  onFrequencyChange,\r\n  onGo,\r\n  onReset,\r\n  showAllocations,\r\n  setShowAllocations,\r\n  showBands,\r\n  setShowBands,\r\n  region,\r\n  setRegion\r\n}) {\r\n  return (\r\n    <div className=\"topbar\">\r\n      <div className=\"topbar-left\">\r\n        <img src=\"/favicon.png\" alt=\"SignalAtlas Logo\" className=\"topbar-logo\" />\r\n        <h1 className=\"topbar-title\">SignalAtlas</h1>\r\n      </div>\r\n      <div className=\"topbar-controls\">\r\n        <input\r\n          type=\"text\"\r\n          value={frequency}\r\n          onChange={(e) => onFrequencyChange(e.target.value)}\r\n          placeholder=\"Enter frequency (e.g. 4625, 2.4G)\"\r\n          className=\"topbar-input\"\r\n        />\r\n        <button className=\"topbar-button\" onClick={onGo}>Go</button>\r\n        <button className=\"topbar-button\" onClick={onReset}>Reset Zoom</button>\r\n\r\n        <label className=\"topbar-checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={showAllocations}\r\n            onChange={(e) => setShowAllocations(e.target.checked)}\r\n          />\r\n          Show Allocations\r\n        </label>\r\n\r\n        <label className=\"topbar-checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={showBands}\r\n            onChange={(e) => setShowBands(e.target.checked)}\r\n          />\r\n          Show Band Markers\r\n        </label>\r\n\r\n        <select\r\n          className=\"topbar-select\"\r\n          value={region}\r\n          onChange={(e) => setRegion(e.target.value)}\r\n        >\r\n          <option>United States</option>\r\n          <option>Europe</option>\r\n          <option>APAC</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Topbar;\r\n","// src/utils/renderSubbands.js\r\nimport * as d3 from 'd3';\r\n\r\nexport default function renderSubbands(svg, bandData, scale, options = {}) {\r\n  const {\r\n    barHeight = 12,\r\n    animate = true,\r\n    externalLabelThreshold = 40,\r\n    transitionDuration = 400,\r\n  } = options;\r\n\r\n  const baseModeColors = {\r\n    cw: '#888888',\r\n    ssb: '#ebcb8b',\r\n    fm: '#a3be8c',\r\n    digital: '#bf616a',\r\n    atv: '#b48ead',\r\n    satellite: '#5e81ac',\r\n    experimental: '#d08770',\r\n    mixed: '#88c0d0',\r\n  };\r\n\r\n  const getModeColor = (mode) => {\r\n    if (!mode) return '#555';\r\n    const cleaned = mode.trim().toLowerCase();\r\n    if (baseModeColors[cleaned]) return baseModeColors[cleaned];\r\n    const parts = cleaned.split(/[/\\s]+/);\r\n    for (const part of parts) {\r\n      if (baseModeColors[part]) return baseModeColors[part];\r\n    }\r\n    return '#999';\r\n  };\r\n\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  const width = parseFloat(svg.attr(\"width\")) || 800;\r\n  svg.append(\"rect\")\r\n    .attr(\"x\", 0)\r\n    .attr(\"y\", 20)\r\n    .attr(\"width\", width)\r\n    .attr(\"height\", barHeight)\r\n    .attr(\"fill\", \"#333\");\r\n\r\n  const labelLanes = [];\r\n  const laneSpacing = 12;\r\n\r\n  bandData.subbands.forEach((sb, i) => {\r\n    const xStart = scale(sb.start);\r\n    const xEnd = scale(sb.end);\r\n    const barWidth = xEnd - xStart;\r\n    const centerX = xStart + barWidth / 2;\r\n    const fill = getModeColor(sb.mode);\r\n    const label = sb.label.length > 20 ? sb.label.slice(0, 17) + '…' : sb.label;\r\n\r\n    const bar = svg.append(\"rect\")\r\n      .attr(\"x\", xStart)\r\n      .attr(\"y\", 20)\r\n      .attr(\"width\", 0)\r\n      .attr(\"height\", barHeight)\r\n      .attr(\"fill\", fill);\r\n\r\n    if (animate) {\r\n      bar.transition()\r\n        .duration(transitionDuration)\r\n        .attr(\"width\", barWidth);\r\n    } else {\r\n      bar.attr(\"width\", barWidth);\r\n    }\r\n\r\n    if (barWidth >= externalLabelThreshold) {\r\n      svg.append(\"text\")\r\n        .attr(\"x\", centerX)\r\n        .attr(\"y\", 30)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"fill\", \"#fff\")\r\n        .attr(\"font-size\", \"10px\")\r\n        .text(label)\r\n        .style(\"opacity\", 0)\r\n        .transition()\r\n        .duration(transitionDuration)\r\n        .style(\"opacity\", 1);\r\n    } else {\r\n      let lane = 0;\r\n      while (\r\n        labelLanes[lane]?.some(pos => Math.abs(pos - centerX) < 50)\r\n      ) {\r\n        lane++;\r\n      }\r\n      if (!labelLanes[lane]) labelLanes[lane] = [];\r\n      labelLanes[lane].push(centerX);\r\n\r\n      const labelY = 10 - lane * laneSpacing;\r\n\r\n      svg.append(\"text\")\r\n        .attr(\"x\", centerX)\r\n        .attr(\"y\", labelY)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"fill\", \"#ccc\")\r\n        .attr(\"font-size\", \"9px\")\r\n        .text(label)\r\n        .style(\"opacity\", 0)\r\n        .transition()\r\n        .duration(transitionDuration)\r\n        .style(\"opacity\", 1);\r\n\r\n      svg.append(\"line\")\r\n        .attr(\"x1\", centerX)\r\n        .attr(\"x2\", centerX)\r\n        .attr(\"y1\", labelY + 2)\r\n        .attr(\"y2\", 20)\r\n        .attr(\"stroke\", \"#999\")\r\n        .attr(\"stroke-width\", 1)\r\n        .style(\"opacity\", 0)\r\n        .transition()\r\n        .duration(transitionDuration)\r\n        .style(\"opacity\", 1);\r\n    }\r\n  });\r\n\r\n  d3.ticks(bandData.start, bandData.end, 5).forEach((freq) => {\r\n    const x = scale(freq);\r\n    svg.append(\"line\")\r\n      .attr(\"x1\", x)\r\n      .attr(\"x2\", x)\r\n      .attr(\"y1\", 32)\r\n      .attr(\"y2\", 42)\r\n      .attr(\"stroke\", \"#aaa\");\r\n\r\n    svg.append(\"text\")\r\n      .attr(\"x\", x)\r\n      .attr(\"y\", 55)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"#ccc\")\r\n      .attr(\"font-size\", \"10px\")\r\n      .text((freq / 1e6).toFixed(3) + \" MHz\");\r\n  });\r\n}\r\n","// src/components/SpectrumLayout.js\r\nimport React, { useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport Topbar from './Topbar';\r\nimport renderSubbands from '../utils/renderSubbands';\r\n\r\nconst SpectrumLayout = ({\r\n  refProp,\r\n  freqInput,\r\n  setFreqInput,\r\n  resetZoom,\r\n  goToFrequency,\r\n  showAllocations,\r\n  setShowAllocations,\r\n  showBands,\r\n  setShowBands,\r\n  region,\r\n  setRegion,\r\n  sidebarOpen,\r\n  setSidebarOpen,\r\n  bands,\r\n  zoomToBand,\r\n  selectedBand,\r\n  setSelectedBand,\r\n  instructionsOpen,\r\n  setInstructionsOpen,\r\n}) => {\r\n  const instructionsRef = useRef(null);\r\n\r\n  return (\r\n    <div\r\n      className=\"spectrum-view-container\"\r\n      style={{ backgroundColor: '#121212', padding: '1rem', minHeight: '100vh', color: 'white' }}\r\n    >\r\n      {/* ⬆️ Topbar with all controls */}\r\n      <Topbar\r\n        frequency={freqInput}\r\n        onFrequencyChange={setFreqInput}\r\n        onGo={() => {\r\n          const fakeEvent = {\r\n            preventDefault: () => {},\r\n            target: {\r\n              elements: {\r\n                freq: { value: freqInput },\r\n              },\r\n            },\r\n          };\r\n          goToFrequency(fakeEvent);\r\n        }}\r\n        onReset={resetZoom}\r\n        showAllocations={showAllocations}\r\n        setShowAllocations={setShowAllocations}\r\n        showBands={showBands}\r\n        setShowBands={setShowBands}\r\n        region={region === 'US' ? 'United States' : region === 'EU' ? 'Europe' : region}\r\n        setRegion={(r) => setRegion(r === 'United States' ? 'US' : r === 'Europe' ? 'EU' : r)}\r\n      />\r\n\r\n      <button\r\n        onClick={() => setInstructionsOpen(!instructionsOpen)}\r\n        style={{\r\n          position: 'fixed',\r\n          bottom: '1rem',\r\n          left: '1rem',\r\n          backgroundColor: '#222',\r\n          color: '#fff',\r\n          border: 'none',\r\n          padding: '6px 12px',\r\n          borderRadius: '4px',\r\n          cursor: 'pointer',\r\n          zIndex: 1000,\r\n        }}\r\n      >\r\n        {instructionsOpen ? 'Click To Close' : '❔ Instructions'}\r\n      </button>\r\n  \r\n      {/* ⬅️ Collapsible sidebar with band jump buttons */}\r\n      <div className={`band-sidebar ${sidebarOpen ? 'open' : 'closed'}`}>\r\n        <button\r\n          className=\"sidebar-toggle\"\r\n          onClick={() => setSidebarOpen((o) => !o)}\r\n          aria-label={sidebarOpen ? 'Collapse sidebar' : 'Open sidebar'}\r\n          style={{\r\n            background: '#222',\r\n            color: '#fff',\r\n            border: 'none',\r\n            padding: '4px 8px',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer',\r\n            marginBottom: '8px',\r\n          }}\r\n        >\r\n          {sidebarOpen ? '«' : '»'}\r\n        </button>\r\n  \r\n        {sidebarOpen && (\r\n          <div className=\"buttons-container-wrapper\">\r\n            <div className=\"buttons-container\">\r\n              {bands.slice(0, 8).map((band, i) => (\r\n                <button key={i} className=\"band-button\" onClick={() => zoomToBand(band)}>\r\n                  {band.name || band.label}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div\r\n        ref={instructionsRef}\r\n        className=\"instructions-sidebar\"\r\n        style={{\r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          width: '260px',\r\n          height: '100%',\r\n          backgroundColor: '#1e1e1e',\r\n          color: '#fff',\r\n          padding: '1rem',\r\n          boxShadow: '2px 0 10px rgba(0,0,0,0.3)',\r\n          zIndex: 999,\r\n          transform: instructionsOpen ? 'translateX(0)' : 'translateX(-100%)',\r\n          opacity: instructionsOpen ? 1 : 0,\r\n          pointerEvents: instructionsOpen ? 'auto' : 'none',\r\n          transition: 'transform 0.4s ease, opacity 0.4s ease',\r\n        }}\r\n      >\r\n        <h3><span role=\"img\" aria-label=\"Instructions book\">📘</span> Instructions</h3>\r\n        <ul style={{ paddingLeft: '1rem' }}>\r\n          <li><span role=\"img\" aria-label=\"magnifying glass\">🔍</span> Use the search bar to jump to a frequency (e.g., \"144.39 MHz\").</li>\r\n          <li><span role=\"img\" aria-label=\"click\">🖱️</span> Click a band to view its sub-band breakdown.</li>\r\n          <li><span role=\"img\" aria-label=\"palette\">🎨</span> Hover to view allocation tooltips.</li>\r\n          <li><span role=\"img\" aria-label=\"zoom\">🔎</span> Zoom in to reveal detailed signal data.</li>\r\n          <li><span role=\"img\" aria-label=\"moon\">🌓</span> Dark mode UI optimized for low-glare usage.</li>\r\n        </ul>\r\n      </div>\r\n  \r\n      {/* 📊 Spectrum canvas */}\r\n      <svg ref={refProp} width=\"100%\" height=\"400px\" />\r\n  \r\n      {/* 📋 Detailed Band Information Box */}\r\n      {selectedBand && (\r\n        <div\r\n          style={{\r\n            background: '#1e1e1e',\r\n            color: 'white',\r\n            padding: '1rem',\r\n            marginTop: '1rem',\r\n            borderTop: '1px solid #333',\r\n          }}\r\n        >\r\n          <h3 style={{ marginTop: 0 }}>{selectedBand.label}</h3>\r\n          <p>\r\n            <strong>Frequency:</strong>{' '}\r\n            {(selectedBand.start / 1e6).toFixed(3)}–{(selectedBand.end / 1e6).toFixed(3)} MHz\r\n          </p>\r\n  \r\n          {selectedBand.description && <p>{selectedBand.description}</p>}\r\n  \r\n          {selectedBand.subbands && (\r\n            <>\r\n              <svg\r\n                ref={(el) => {\r\n                  if (!el || !selectedBand) return;\r\n                  const svg = d3.select(el);\r\n                  svg.selectAll(\"*\").remove();\r\n\r\n                  const width = el.getBoundingClientRect().width;\r\n                  const height = 70;\r\n                  svg.attr(\"width\", width).attr(\"height\", height);\r\n\r\n                  const scale = d3.scaleLinear()\r\n                    .domain([selectedBand.start, selectedBand.end])\r\n                    .range([0, width]);\r\n\r\n                  // Background bar\r\n                  svg.append(\"rect\")\r\n                    .attr(\"x\", 0)\r\n                    .attr(\"y\", 20)\r\n                    .attr(\"width\", width)\r\n                    .attr(\"height\", 12)\r\n                    .attr(\"fill\", \"#333\");\r\n\r\n                  // Subband bars and dynamic labels\r\n                  renderSubbands(svg, selectedBand, scale, {\r\n                    animate: true,\r\n                    barHeight: 12,\r\n                    externalLabelThreshold: 40,\r\n                    transitionDuration: 500,\r\n                  });                                    \r\n                }}\r\n                style={{ width: '100%', height: '70px', marginTop: '10px' }}\r\n              />\r\n  \r\n              {/* Legend */}\r\n              {/* Dynamic Legend */}\r\n              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px', marginTop: '0.5rem' }}>\r\n                {(() => {\r\n                  const baseModeColors = {\r\n                    cw: '#888888',\r\n                    ssb: '#ebcb8b',\r\n                    fm: '#a3be8c',\r\n                    digital: '#bf616a',\r\n                    atv: '#b48ead',\r\n                    satellite: '#5e81ac',\r\n                    experimental: '#d08770',\r\n                    mixed: '#88c0d0',\r\n                  };\r\n\r\n                  const getModeColor = (mode) => {\r\n                    if (!mode) return '#555';\r\n                    const cleaned = mode.trim().toLowerCase();\r\n                    if (baseModeColors[cleaned]) return baseModeColors[cleaned];\r\n                    const parts = cleaned.split(/[\\s/]+/);\r\n                    for (const part of parts) {\r\n                      if (baseModeColors[part]) return baseModeColors[part];\r\n                    }\r\n                    return '#999';\r\n                  };\r\n\r\n                  const seen = new Set();\r\n                  return selectedBand.subbands\r\n                    .map(sb => (sb.mode || '').trim().toLowerCase())\r\n                    .flatMap(modeStr => modeStr.split(/[\\s/]+/)) // split composite modes\r\n                    .filter((mode, i, arr) => mode && !seen.has(mode) && seen.add(mode)) // dedupe\r\n                    .map(mode => (\r\n                      <div key={mode} style={{ display: 'flex', alignItems: 'center', fontSize: '0.9rem' }}>\r\n                        <span style={{ width: '14px', height: '14px', backgroundColor: getModeColor(mode), display: 'inline-block', marginRight: '6px' }} />\r\n                        {mode.toUpperCase()}\r\n                      </div>\r\n                    ));\r\n                })()}\r\n              </div>\r\n  \r\n              <table style={{ width: '100%', color: '#ddd', borderCollapse: 'collapse', marginTop: '1rem' }}>\r\n                <thead>\r\n                  <tr style={{ borderBottom: '1px solid #444' }}>\r\n                    <th style={{ textAlign: 'left', padding: '4px' }}>Label</th>\r\n                    <th style={{ textAlign: 'left', padding: '4px' }}>Start</th>\r\n                    <th style={{ textAlign: 'left', padding: '4px' }}>End</th>\r\n                    <th style={{ textAlign: 'left', padding: '4px' }}>Mode</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {selectedBand.subbands.map((sb, idx) => (\r\n                    <tr key={idx} style={{ borderBottom: '1px solid #333' }}>\r\n                      <td style={{ padding: '4px' }}>{sb.label}</td>\r\n                      <td style={{ padding: '4px' }}>{(sb.start / 1e6).toFixed(3)} MHz</td>\r\n                      <td style={{ padding: '4px' }}>{(sb.end / 1e6).toFixed(3)} MHz</td>\r\n                      <td style={{ padding: '4px' }}>{sb.mode}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </>\r\n          )}\r\n  \r\n          <button\r\n            style={{\r\n              marginTop: '1rem',\r\n              backgroundColor: '#333',\r\n              color: 'white',\r\n              padding: '6px 12px',\r\n              border: 'none',\r\n              borderRadius: '4px',\r\n              cursor: 'pointer',\r\n            }}\r\n            onClick={() => setSelectedBand(null)}\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpectrumLayout;\r\n","// src/components/SpectrumView.js\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport SpectrumLayout from './SpectrumLayout';\r\nimport bands from '../data/bands.json';\r\nimport detailedBands from '../data/detailedbands.json';\r\nimport allocationsUS from '../data/allocations-us.json';\r\nimport allocationsEU from '../data/allocations-eu.json';\r\nimport allocationsAPAC from '../data/allocations-apac.json';\r\nimport subbandDetails from '../data/subbands.json';\r\nimport '../styles.css';\r\n\r\n/*function getTruncatedLabel(label, pixelWidth) {\r\n  if (pixelWidth < 30) return label.slice(0, 5) + '…';\r\n  if (pixelWidth < 50) return label.slice(0, 10) + '…';\r\n  return label;\r\n}*/\r\n\r\nfunction truncateToFit(textElem, fullLabel, maxWidthPx) {\r\n  const textNode = d3.select(textElem);\r\n  textNode.text(fullLabel);\r\n\r\n  if (textNode.node().getComputedTextLength() <= maxWidthPx) return;\r\n\r\n  let truncated = fullLabel;\r\n  while (truncated.length > 1 && textNode.node().getComputedTextLength() > maxWidthPx) {\r\n    truncated = truncated.slice(0, -1);\r\n    textNode.text(truncated + \"…\");\r\n  }\r\n}\r\n\r\nconst SpectrumView = () => {\r\n  const ref = useRef();\r\n  const zoomRef = useRef();\r\n  const xScaleRef = useRef();\r\n  const markerRef = useRef();\r\n  const markerLabelRef = useRef();\r\n  const hoverLineRef = useRef();\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 20 };\r\n  const [showAllocations, setShowAllocations] = useState(true);\r\n  const [showBands, setShowBands] = useState(true);\r\n  const [region, setRegion] = useState('US');\r\n  const [sidebarOpen, setSidebarOpen] = useState(true);\r\n  const [freqInput, setFreqInput] = useState('');\r\n  const [selectedBand, setSelectedBand] = useState(null);\r\n  const [instructionsOpen, setInstructionsOpen] = useState(false);\r\n\r\n  const instructionsRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (e) => {\r\n      if (\r\n        instructionsOpen &&\r\n        instructionsRef.current &&\r\n        !instructionsRef.current.contains(e.target)\r\n      ) {\r\n        setInstructionsOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [instructionsOpen]);\r\n\r\n  const regionMap = {\r\n        US: allocationsUS,\r\n        EU: allocationsEU,\r\n        APAC: allocationsAPAC\r\n      };\r\n  const allocations = regionMap[region];\r\n\r\n  useEffect(() => {\r\n    const width = 1200;\r\n    const height = 300;\r\n\r\n    d3.select(ref.current).selectAll(\"*\").remove();\r\n\r\n    const svg = d3.select(ref.current)\r\n      .attr(\"viewBox\", `0 0 ${width} ${height}`)\r\n      .style(\"background\", \"#1e1e1e\");\r\n\r\n    svg.append(\"defs\")\r\n      .append(\"pattern\")\r\n      .attr(\"id\", \"diagonal-stripes\")\r\n      .attr(\"patternUnits\", \"userSpaceOnUse\")\r\n      .attr(\"width\", 8)\r\n      .attr(\"height\", 8)\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M-2,2 l4,-4 M0,8 l8,-8 M6,10 l4,-4\")\r\n      .attr(\"stroke\", \"white\")\r\n      .attr(\"stroke-opacity\", 0.05)\r\n      .attr(\"stroke-width\", 1);\r\n\r\n    const zoomLayer = svg.append(\"g\").attr(\"class\", \"zoom-layer\");\r\n    const allocLayer = svg.append(\"g\").attr(\"class\", \"alloc-layer\");\r\n    const allocTextLayer = svg.append(\"g\").attr(\"class\", \"alloc-text-layer\");\r\n    const labelLayer = svg.append(\"g\").attr(\"class\", \"label-layer\");\r\n    const markerLayer = svg.append(\"g\").attr(\"class\", \"marker-layer\");\r\n    const bandGroup = svg.append(\"g\").attr(\"class\", \"band-group\");\r\n\r\n    const x = d3.scaleLinear()\r\n      .domain([0, 300_000_000_000])\r\n      .range([margin.left, width - margin.right]);\r\n\r\n    xScaleRef.current = x;\r\n\r\n    const xAxis = d3.axisBottom(x).ticks(12);\r\n\r\n    zoomLayer.append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\r\n      .attr(\"class\", \"x-axis\")\r\n      .call(xAxis)\r\n      .selectAll(\"text\")\r\n      .attr(\"fill\", \"#ccc\");\r\n\r\n    const formatAxis = (scale) => {\r\n      const visibleHz = scale.domain()[1] - scale.domain()[0];\r\n      if (visibleHz < 1_000) return d => `${d.toFixed(0)} Hz`;\r\n      if (visibleHz < 1_000_000) return d => `${(d / 1e3).toFixed(2)} kHz`;\r\n      if (visibleHz < 1_000_000_000) return d => `${(d / 1e6).toFixed(2)} MHz`;\r\n      return d => `${(d / 1e9).toFixed(2)} GHz`;\r\n    };\r\n\r\n    allocLayer.selectAll(\"rect\")\r\n      .data(allocations)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", d => x(d.start))\r\n      .attr(\"y\", 30)\r\n      .attr(\"width\", d => x(d.end) - x(d.start))\r\n      .attr(\"height\", 150)\r\n      .attr(\"fill\", d => d.color || \"#555\")\r\n      .attr(\"fill-opacity\", 0.15)\r\n      .attr(\"class\", \"allocation-band\")\r\n      .style(\"display\", showAllocations ? \"block\" : \"none\")\r\n      .append(\"title\")\r\n      .text(d => `${d.label}: ${d.usage}`);\r\n\r\n    const allocLabels = allocTextLayer.selectAll(\"text\").data(allocations);\r\n    allocLabels.exit().remove();\r\n    allocLabels.enter()\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"#aaa\")\r\n      .attr(\"font-size\", \"10px\")\r\n      .attr(\"x\", -9999)\r\n      .attr(\"y\", -9999)\r\n      .merge(allocLabels)\r\n      .text(d => d.label);\r\n\r\n    function styleAllocLabels(scale) {\r\n      const lanes = [];\r\n      const minSpacing = 50;\r\n      const baseY = 190;\r\n      const lineH = 14;\r\n      const minWidthPx = 30;\r\n\r\n      allocTextLayer.selectAll(\"text\")\r\n        .each(function(d) {\r\n          const cx = (scale(d.start) + scale(d.end)) / 2;\r\n          const widthPx = scale(d.end) - scale(d.start);\r\n\r\n          if (!showAllocations || widthPx < minWidthPx) {\r\n            return d3.select(this).style(\"opacity\", 0);\r\n          }\r\n\r\n          let lane = 0;\r\n          while (lanes[lane] != null && cx - lanes[lane] < minSpacing) {\r\n            lane++;\r\n          }\r\n          lanes[lane] = cx;\r\n\r\n          d3.select(this)\r\n            .attr(\"x\", cx)\r\n            .attr(\"y\", baseY + lane * lineH)\r\n            .style(\"opacity\", 1);\r\n\r\n          if (widthPx < 10) {\r\n            return d3.select(this).style(\"opacity\", 0);\r\n          }\r\n          truncateToFit(this, d.label, widthPx);\r\n        });\r\n    }\r\n\r\n    styleAllocLabels(x);\r\n\r\n    const bandsGroup = zoomLayer.append(\"g\");\r\n    bandsGroup.selectAll(\"rect\")\r\n      .data(bands)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", d => x(d.start))\r\n      .attr(\"y\", 50)\r\n      .attr(\"width\", d => x(d.end) - x(d.start))\r\n      .attr(\"height\", 100)\r\n      .attr(\"fill\", \"url(#diagonal-stripes)\")\r\n      .attr(\"fill-opacity\", 1)\r\n      .attr(\"stroke\", d => d.color)\r\n      .attr(\"stroke-width\", 2)\r\n      .append(\"title\")\r\n      .text(d => d.label);\r\n\r\n    labelLayer.selectAll(\"text\")\r\n      .data(bands)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"x\", d => x((d.start + d.end) / 2))\r\n      .attr(\"y\", 140)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"#fff\")\r\n      .attr(\"font-size\", \"14px\")\r\n      .attr(\"font-weight\", \"bold\")\r\n      .text(d => d.label);\r\n\r\n    const hoverLine = markerLayer.append(\"line\")\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"#888\")\r\n      .attr(\"stroke-dasharray\", \"4 2\")\r\n      .attr(\"stroke-width\", 1)\r\n      .style(\"display\", \"none\");\r\n\r\n    hoverLineRef.current = hoverLine;\r\n\r\n    // === Render detailed bands with vertical stacking to avoid overlaps ===\r\n    // Collision-avoidant rendering for detailed bands\r\n    const detailedBandLanes = [];\r\n    const detailedBandLineHeight = 10;\r\n    const detailedBandBaseY = 55;\r\n\r\n    // Rectangles for detailed bands\r\n    bandGroup.selectAll(\"rect\")\r\n    .data(detailedBands)\r\n    .enter()\r\n    .append(\"rect\")\r\n    .each(function(d) {\r\n      const startPx = x(d.start);\r\n      const endPx = x(d.end);\r\n      const widthPx = endPx - startPx;\r\n  \r\n      let lane = 0;\r\n      while (\r\n        detailedBandLanes[lane] &&\r\n        detailedBandLanes[lane].some(({ start, end }) => !(endPx < start || startPx > end))\r\n      ) {\r\n        lane++;\r\n      }\r\n  \r\n      if (!detailedBandLanes[lane]) detailedBandLanes[lane] = [];\r\n      detailedBandLanes[lane].push({ start: startPx, end: endPx });\r\n      d.lane = lane; // Store lane on data\r\n  \r\n      d3.select(this)\r\n        .attr(\"x\", startPx)\r\n        .attr(\"y\", detailedBandBaseY + lane * detailedBandLineHeight)\r\n        .attr(\"width\", widthPx)\r\n        .attr(\"height\", 8)\r\n        .attr(\"fill\", d.color || \"#ff0\")\r\n        .attr(\"opacity\", 0.8)\r\n        .style(\"cursor\", \"pointer\")\r\n        .on(\"click\", () => {\r\n          const found = subbandDetails.find(b =>\r\n            b.label === d.label || (b.start === d.start && b.end === d.end)\r\n          );\r\n          setSelectedBand(found || d); // fallback to showing d if no match\r\n        })\r\n        .append(\"title\")\r\n        .text(`${d.label}\\n${d.description || ''}`);\r\n    });  \r\n\r\n    // Labels for detailed bands\r\n    bandGroup.selectAll(\"text\")\r\n    .data(detailedBands)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"x\", d => (x(d.start) + x(d.end)) / 2)\r\n    .attr(\"y\", d => detailedBandBaseY + d.lane * detailedBandLineHeight + 5) // 4 centers in 8px bar\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"dominant-baseline\", \"middle\") // This keeps it centered vertically\r\n    .attr(\"fill\", \"#ccc\")\r\n    .attr(\"font-size\", \"9px\")\r\n    .text(d => d.label)\r\n    .each(function(d) {\r\n      const widthPx = x(d.end) - x(d.start);\r\n      truncateToFit(this, d.label, widthPx);\r\n    });   \r\n\r\n    const marker = markerLayer.append(\"line\")\r\n      .attr(\"y1\", 30)\r\n      .attr(\"y2\", height - margin.bottom)\r\n      .attr(\"stroke\", \"#ff4081\")\r\n      .attr(\"stroke-width\", 2)\r\n      .style(\"display\", \"none\")\r\n      .style(\"cursor\", \"pointer\")\r\n      .on(\"click\", () => {\r\n        marker.style(\"display\", \"none\");\r\n        markerLabel.style(\"display\", \"none\");\r\n      });\r\n\r\n    const markerLabel = markerLayer.append(\"text\")\r\n      .attr(\"y\", 20)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"#ff4081\")\r\n      .attr(\"font-size\", \"12px\")\r\n      .style(\"display\", \"none\")\r\n      .style(\"pointer-events\", \"none\");\r\n\r\n    markerRef.current = marker;\r\n    markerLabelRef.current = markerLabel;\r\n\r\n    const zoom = d3.zoom()\r\n      .scaleExtent([1, 1e8])\r\n      .translateExtent([[0, 0], [width, height]])\r\n      .extent([[0, 0], [width, height]])\r\n      .on(\"zoom\", (event) => {\r\n        const transform = event.transform;\r\n        const zx = transform.rescaleX(x);\r\n        //const zoomLevel = transform.k;\r\n\r\n        xAxis.tickFormat(formatAxis(zx));\r\n        zoomLayer.select(\".x-axis\").call(xAxis.scale(zx)).selectAll(\"text\").attr(\"fill\", \"#ccc\");\r\n\r\n        allocLayer.selectAll(\"rect\")\r\n          .attr(\"x\", d => zx(d.start))\r\n          .attr(\"width\", d => zx(d.end) - zx(d.start));\r\n\r\n          styleAllocLabels(zx);      \r\n\r\n        zoomLayer.selectAll(\"rect\")\r\n          .attr(\"x\", d => zx(d.start))\r\n          .attr(\"width\", d => zx(d.end) - zx(d.start));\r\n\r\n        labelLayer.selectAll(\"text\")\r\n          .attr(\"x\", d => (zx(d.start) + zx(d.end)) / 2)\r\n          .style(\"display\", d => (zx(d.end) - zx(d.start)) < 40 ? \"none\" : \"block\");\r\n\r\n        //const showDetailedBands = zoomLevel > 5000;\r\n\r\n        bandGroup.selectAll(\"rect\")\r\n          .attr(\"x\", d => zx(d.start))\r\n          .attr(\"width\", d => zx(d.end) - zx(d.start))\r\n          .style(\"opacity\", d => showBands && (zx(d.end) - zx(d.start)) > 1 ? 0.8 : 0);\r\n\r\n        bandGroup.selectAll(\"text\")\r\n          .attr(\"x\", d => (zx(d.start) + zx(d.end)) / 2)\r\n          .each(function(d) {\r\n            const widthPx = zx(d.end) - zx(d.start);\r\n            truncateToFit(this, d.label, widthPx);\r\n          })          \r\n          .style(\"opacity\", d => {\r\n            const width = zx(d.end) - zx(d.start);\r\n            return showBands && width > 40 ? 1 : 0;\r\n          });\r\n\r\n        if (markerRef.current && markerRef.current.style(\"display\") !== \"none\") {\r\n          const markerX = +markerRef.current.attr(\"data-freq\");\r\n          const fx = zx(markerX);\r\n          markerRef.current.attr(\"x1\", fx).attr(\"x2\", fx);\r\n          markerLabelRef.current.attr(\"x\", fx);\r\n        }\r\n\r\n        if (hoverLineRef.current) hoverLineRef.current.style(\"display\", \"none\");\r\n\r\n        //hide any that are too close to the last one\r\n        if (showAllocations) {\r\n        let lastX = -Infinity;\r\n        const minSpacing = 50; // px between labels—you can tweak this\r\n\r\n        allocTextLayer.selectAll(\"text\")\r\n          .each(function(d) {\r\n            const cx = (zx(d.start) + zx(d.end)) / 2;\r\n            if (cx - lastX > minSpacing) {\r\n              d3.select(this).style(\"opacity\", 1);\r\n              lastX = cx;\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n    svg.call(zoom);\r\n    zoomRef.current = zoom;\r\n    setTimeout(() => {\r\n      svg.call(zoom.transform, d3.zoomIdentity);\r\n    }, 0);\r\n\r\n  }, [showAllocations, showBands, allocations, margin.bottom, margin.left, margin.right]);\r\n\r\n  const resetZoom = () => {\r\n    const svg = d3.select(ref.current);\r\n    svg.transition().duration(500).call(zoomRef.current.transform, d3.zoomIdentity);\r\n    if (markerRef.current) markerRef.current.style(\"display\", \"none\");\r\n    if (markerLabelRef.current) markerLabelRef.current.style(\"display\", \"none\");\r\n  };\r\n\r\n  const zoomToBand = (band) => {\r\n    const svg = d3.select(ref.current);\r\n    const width = svg.node().getBoundingClientRect().width;\r\n    const x = xScaleRef.current;\r\n    const scale = width / (x(band.end) - x(band.start));\r\n    const tx = -x(band.start) * scale + margin.left;\r\n    const transform = d3.zoomIdentity.translate(tx, 0).scale(scale);\r\n    svg.transition().duration(500).call(zoomRef.current.transform, transform);\r\n  };\r\n\r\n  const goToFrequency = (e) => {\r\n    e.preventDefault();\r\n    const input = e.target.elements.freq.value.trim().toLowerCase();\r\n    let freq = parseFloat(input);\r\n    if (input.includes(\"ghz\")) freq *= 1e9;\r\n    else if (input.includes(\"mhz\")) freq *= 1e6;\r\n    else if (input.includes(\"khz\")) freq *= 1e3;\r\n    if (isNaN(freq)) return;\r\n\r\n    const svg = d3.select(ref.current);\r\n    const width = svg.node().getBoundingClientRect().width;\r\n    const x = xScaleRef.current;\r\n\r\n    const bandwidth = 100_000;\r\n    const scale = width / (x(freq + bandwidth / 2) - x(freq - bandwidth / 2));\r\n    const tx = -x(freq) * scale + width / 2;\r\n    const transform = d3.zoomIdentity.translate(tx, 0).scale(scale);\r\n\r\n    svg.transition().duration(500).call(zoomRef.current.transform, transform);\r\n\r\n    if (markerRef.current) {\r\n      markerRef.current\r\n        .attr(\"x1\", x(freq))\r\n        .attr(\"x2\", x(freq))\r\n        .attr(\"data-freq\", freq)\r\n        .style(\"display\", \"block\");\r\n    }\r\n    if (markerLabelRef.current) {\r\n      const label = freq >= 1e9 ? `${(freq / 1e9).toFixed(3)} GHz`\r\n        : freq >= 1e6 ? `${(freq / 1e6).toFixed(3)} MHz`\r\n        : freq >= 1e3 ? `${(freq / 1e3).toFixed(3)} kHz`\r\n        : `${freq.toFixed(0)} Hz`;\r\n      markerLabelRef.current\r\n        .attr(\"x\", x(freq))\r\n        .text(label)\r\n        .style(\"display\", \"block\");\r\n    }\r\n  };\r\n\r\n  //const toggleAllocations = () => {\r\n  //  setShowAllocations(prev => !prev);\r\n  //};\r\n\r\n  return (\r\n    <SpectrumLayout\r\n      refProp={ref}\r\n      freqInput={freqInput}\r\n      setFreqInput={setFreqInput}\r\n      resetZoom={resetZoom}\r\n      goToFrequency={goToFrequency}\r\n      showAllocations={showAllocations}\r\n      setShowAllocations={setShowAllocations}\r\n      showBands={showBands}\r\n      setShowBands={setShowBands}\r\n      region={region}\r\n      setRegion={setRegion}\r\n      sidebarOpen={sidebarOpen}\r\n      setSidebarOpen={setSidebarOpen}\r\n      bands={bands}\r\n      zoomToBand={zoomToBand}\r\n      selectedBand={selectedBand}\r\n      setSelectedBand={setSelectedBand}\r\n      instructionsOpen={instructionsOpen}\r\n      setInstructionsOpen={setInstructionsOpen}\r\n    />\r\n  );        \r\n};\r\n\r\nexport default SpectrumView;","import React from 'react';\r\nimport SpectrumView from './components/SpectrumView';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Header container with logo */}\r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginLeft: '20px' }}>\r\n        <img \r\n          src=\"/favicon.png\"  // Ensure this points to the correct image in the public folder\r\n          alt=\"SignalAtlas Logo\"\r\n          style={{ width: '40px', height: '40px', objectFit: 'contain' }}\r\n        />\r\n        <h1 style={{ margin: '0', fontSize: '2rem', fontWeight: 'bold', color: 'white' }}>\r\n          SignalAtlas\r\n        </h1>\r\n      </div>\r\n      <SpectrumView />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}